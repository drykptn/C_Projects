/*---------------------------------------------------------------------------*/
/* 	                                                                     */
/* HW05_141044025_Derya_Kaptan					             */
/*               				                             */
/* --------------------------------------------------------------------------*/
/* Created on 06/04/2016 by Derya_Kaptan			             */
/* 									     */
/*									     */
/*---------------------------------------------------------------------------*/
/*                            Includes 				    	     */
/*---------------------------------------------------------------------------*/
#include<stdio.h>
#include <string.h>
#include<math.h>
#include<stdlib.h>
/*---------------------------------------------------------------------------*/
/*                           Function Prototypes   			     */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* 									     */ 
/*This function will check whether a queen can move from source cell to the 
target cell.*/
int isQueenMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		  int targetRow);

/*This function will check whether a pwan can move from source cell to the 
target cell.*/
int isPawnMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		  int targetRow);
		  
/*This function will check whether a bishop can move from source cell to the 
target cell.*/
int isBishopMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		  int targetRow);

/*This function will check whether a king can move from source cell to the 
target cell.*/
int isKingMovable(char *board, char sourceCol, int sourceRow, char targetCol, 
	 	    int targetRow);

/*This function will check whether a rook can move from source cell to the 
target cell.*/
int isRookMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		  int targetRow);

/*This function will check whether a knight can move from source cell to the 
target cell.*/
int isKnightMovable(char *board, char sourceCol, int sourceRow, char targetCol, 
	 	   int targetRow);

/*This function will check whether the given cell is valid
according to the board sizes*/
int isValidCell(char col, int row);

int checkRook(char *board,int target,int source , int lowerUpper );

int conversion(char col, int row);

/*This function will print the current state of the board as show above.*/
void printBoard(char *board);

int checkRock( char targetRock, int lowerOrUpperCase );
/*This function will take the row and column values of a specific cell on the 
board.*/
void getPosition(char *col, int *row);

void initBoard( char* board);
/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

void emptyBuffer()
{
	while ( getchar() != '\n' );
}
int main()
{
	char board [64];
	int initComplete = 0;
	char empty;
	
	int command;
	scanf(" %d&", &command);
		
	while(command!=4)
	{
		switch(command)
		{
			case 1: initBoard(board); 
				initComplete = 1; 
				printf("OK\n");
				break;
			case 2: 
				/*Read space character after command number*/
				scanf("%c", &empty);
				if (initComplete)
				{
					if ( isPieceMovable(board) )
						printf("YES\n");
					else
						printf("NO\n");
				}
				else
				{  
					printf("Board is not initialized!\n");
					emptyBuffer();
				}
				break;
			case 3: 
				if (initComplete)
					printBoard(board);
				else  
					printf("Board is not initialized!\n");
					emptyBuffer();
				break;

			default: 
				printf("Invalid command!\n"); emptyBuffer();
				break;

		}	
		
		scanf(" %d&", &command);
	
	}
	return 0;
}
void initBoard(char *board)
{  
	int i;
	char arr[64]= { 'r','n','b','q','k','b','n','r',
			'p','p','p','p','p','p','p','p',
			' ',' ',' ',' ',' ',' ',' ',' ',
			' ',' ',' ',' ',' ',' ',' ',' ',
			' ',' ',' ',' ',' ',' ',' ',' ',
			' ',' ',' ',' ',' ',' ',' ',' ',
			'P','P','P','P','P','P','P','P',
			'R','N','B','Q','K','B','N','R'};

	for (i = 0; i < 65; i += 1)
	{
		board[i]=arr[i];
	}

}
/*lower.. 0 sa küçük harf 1 se büyük harf*/
int checkRock( char targetRock, int lowerOrUpperCase )
{
	int i, result = 1;
	char* arr;
	
	if( lowerOrUpperCase == 0 )
	{
		arr = "pqkbnr";
	}
	else
	{
		arr = "PQKBNR";
	}
	for( i = 0 ; i < 6 ; i++ )
	{
		if( arr[i] == targetRock )
		{
			result = 0;
			i = 7;
		}
	}
	return result;
}

int isValidCell(char col, int row)
{
	char array[16]={'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'};
	int i, result = 0;
	
	for ( i=0 ; i<16 ; i++ )
	{
		if ( col==array[i] )
		{
			if (row>=0 && row<=8 )
			{
				result = 1;
				i = 17;
			}
		}
	}

	return result;
}

void getPosition(char *col, int *row)
{
	scanf(" %c&", col);
	scanf(" %d&", row);	
}

int conversion(char col, int row )
{	

	int m, r, result, convert;

	convert=(int)col;

	m=convert%97;		
	
	r=8-(row);
	result=m+r*8;
	
	return result;
}

void printBoard(char *board)
{
	int i, j;
	
	printf("   a b c d e f g h \n");
	printf("   - - - - - - - - \n" );
	for(i = 0; i < 8; i++)
	{
		printf("%d| ", (8-i));	
		for( j = 0; j < 8; j++)
		{
			printf("%c ", board[i*8+j] );
		}
		printf("|\n");
	}	
	printf("   - - - - - - - - \n");
	
}
int checkBoard(char *board)
{
	int len=(int)strlen(board);
	if ( len == 64 )
		return 1;
	else
	{
		printf("Board is not initialized");
		return 0;
	}
}
int isPieceMovable( char *board )
{

	char targetCol, sourceCol;
	int targetRow, sourceRow, source, result;
	
	result=checkBoard( board );
	if ( result!=0 )
	{
		getPosition( &sourceCol, &sourceRow );
		result=isValidCell( sourceCol, sourceRow );
		if ( result==1 )
		{
			getPosition( &targetCol, &targetRow );
			result=isValidCell( targetCol, targetRow );
			if ( result==1 ){
				source = conversion(  sourceCol, sourceRow  );
	
				if ( board[source]=='p' || board[source]=='P' )
				{
					result=isPawnMovable( board , sourceCol, sourceRow, targetCol, 
						       targetRow);
				}
				else if ( board[source]=='r' || board[source]=='R' )
				{
					result=isRookMovable( board, sourceCol, sourceRow, targetCol, 
						       targetRow);
				}
				else if ( board[source]=='n' || board[source]=='N' )
				{
					result=isKnightMovable( board, sourceCol, sourceRow, targetCol, 
							 targetRow);
				}
				else if ( board[source]=='k' || board[source]=='K' )
				{
					result=isKingMovable( board, sourceCol, sourceRow, targetCol, 
						       targetRow);
				}
				else if ( board[source]=='b' || board[source]=='B' )
				{
					result=isBishopMovable( board, sourceCol, sourceRow, targetCol, 
							 targetRow);
				}
				else if ( board[source]=='q' || board[source]=='Q' )
				{
					result=isQueenMovable( board, sourceCol, sourceRow, targetCol, 
							targetRow);
				}
			}
		}
	}
	return result;
}
int isPawnMovable(char *board , char sourceCol, int sourceRow, char targetCol, int targetRow)
{
	char rock; 
	int source, target, result = 0;
	
	source=conversion( sourceCol, sourceRow );
	target=conversion( targetCol, targetRow);

	rock=board[source];

	if( rock=='p' )
	{
		if((source + 8) < (int)strlen(board) && board[source + 8] == ' ' &&  (source + 8) == target )
		{
			/*piyonun önü boşsa*/
			result = 1;
			
		}
		else if( (source + 8 + 1) < (int)strlen(board) )
		{
			/*çapraz sağ da taş varsa*/
			if( ( board[(source + 8) + 1] ) != ' ' && 
			      checkRock((board[(source + 8) + 1]), 0) == 1 &&
			      (source+8+1) == target )
			{
				result = 1;
				/*çapraz solda taş varsa*/
			}
			else if( board[(source + 8 - 1)] != ' ' && checkRock((board[(source + 8) - 1]), 0) == 1 && (source + 8 - 1) == target )
			{
				result = 1;
			}
		}
	}
	if( rock=='P' )
	{
		if( (source - 8) >= 0 && board[source - 8] == ' ' && (source - 8) == target)
		{
			result = 1;
		}
		else if( (source - 8 + 1) >= 0 &&  ( board[ ( source - 8 ) + 1 ] ) != ' ' && (source - 8 + 1) == target  && checkRock((board[(source - 8) + 1]), 1) == 1)
		{
			/*çapraz sağ da taş varsa*/
				result = 1;
		}
		else if((source - 8 - 1) >= 0 && board[(source - 8 - 1)] != ' ' && checkRock((board[source - 8 - 1]), 1) == 1 && (source - 8 - 1) == target )
		{
			/*çapraz solda taş varsa*/
			result = 1;
		}
	}

	return result;
}
int isRookMovable( char *board , char sourceCol, int sourceRow, char targetCol, 
                   int targetRow )
{
	char rock; 
	int source, target, result = 0;
	
	source = conversion( sourceCol, sourceRow );
	target = conversion( targetCol, targetRow);
	
	rock = board[ source ];
	if ( rock == 'r' || rock == 'b')
	{
		result = checkRook(board, target, source, 0);
	}
	else if ( rock == 'R' || rock == 'B')
	{
		result = checkRook(board, target, source, 1);
	}
	return result;
}
int isKingMovable(char *board, char sourceCol, int sourceRow, char targetCol, 
	 	    int targetRow)
{
	char rock; 
	int source, target, result = 0;
	
	source = conversion( sourceCol, sourceRow );
	target = conversion( targetCol, targetRow);
	
	rock = board[ source ];
	if ( rock == 'k')
	{	
		/*Şahın önü boş veya doluysa*/
		if ( ( source + 8 ) < (int)strlen( board ) && 
		     ( source + 8) == target &&
		     checkRock((board[source + 8 ]), 0) == 1)
		{ 
		    	result = 1;
		}
		/*arkası boş veya doluysa*/
		else if ( ( source - 8 ) >= 0 && 
		          ( source - 8 ) == target &&
			  checkRock((board[source - 8 ]), 0) == 1)
		{ 
		    	result = 1;
		}
			
		/*çapraz ön sağda taş varsa veya boşsa*/		
		else if ( ( source + 8 + 1 ) < (int)strlen( board ) &&  
		          ( source + 8 + 1 ) == target &&
		          checkRock((board[source + 8 + 1 ]), 0) == 1)
		{ 
		    	result = 1;
		}

		/*çapraz solda taş varsa veya boşsa		*/
		else if ( ( source + 8 - 1 ) < (int)strlen( board ) &&  
		          ( source + 8 - 1 ) == target &&
			  checkRock((board[source + 8 - 1 ]), 0) == 1 )
		{ 
		    	result = 1;
		}

		/*çapraz arka sağda taş varsa veya boşsa*/	
		else if ( ( source - 8 + 1 ) >= 0 &&  
		          ( source - 8 + 1 ) == target &&
		           checkRock((board[source - 8 + 1 ]), 0) == 1 )
		{ 
		     	result = 1;
		}

		/*çapraz solda taş varsa veya boşsa		*/
		else if ( ( source - 8 - 1 ) >= 0 &&  
		          ( source - 8 - 1 ) == target &&
		          checkRock((board[source - 8 - 1 ]), 0) == 1)
		{ 
		    	result = 1;
		}
	}
	else if ( rock == 'K')
	{	
		/*Şahın önü boş veya doluysa*/
		if ( ( source - 8 ) >= 0 && ( source - 8 ) == target &&
		     checkRock((board[source - 8 ]), 1) == 1 )
			result = 1;
	
		/*arkası boş veya doluysa*/
		else if ( ( source + 8 ) < (int)strlen( board ) && 
		          ( source + 8 ) == target &&
		          checkRock((board[source + 8 ]), 1) == 1)
			result = 1;	
	
		/*çapraz ön sağda taş varsa veya boşsa		*/
		else if ( ( source - 8 + 1 ) >= 0 &&  
		          ( source - 8 + 1 ) == target &&
		          checkRock((board[source - 8 + 1 ]), 1) == 1)
			result = 1;
	
		/*çapraz solda taş varsa veya boşsa		*/
		else if ( ( source - 8 - 1 ) >= 0 &&  
		          ( source - 8 - 1 ) == target &&
		          checkRock((board[source - 8 - 1]), 1) == 1)
			result = 1;
	
		/*çapraz arka sağda taş varsa veya boşsa		*/
		else if ( ( source + 8 + 1 ) < (int)strlen( board ) &&  
		          ( source + 8 + 1 ) == target &&
		          checkRock((board[source + 8 ]), 1) == 1)
			result = 1;
	
		/*çapraz solda taş varsa veya boşsa		*/
		else if ( ( source + 8 - 1 ) < (int)strlen( board ) &&  
		          ( source + 8 - 1 ) == target &&
		          checkRock((board[source + 8 ]), 1) == 1)
			result = 1;
	}
	return result;	
}

int isKnightMovable(char *board, char sourceCol, int sourceRow, char targetCol, 
	 	   int targetRow)
{
	char rock; 
	int source, target, result = 0;

	source = conversion(  sourceCol, sourceRow  );
	target = conversion( targetCol, targetRow );
	
	rock = board[ source ];
	if ( rock == 'n')
	{
		/*ön sağ hamle*/
		if ( ( source + 16 + 1 ) < (int)strlen( board ) && 
		     ( source + 16 + 1 ) == target &&
		       checkRock((board[source + 16 + 1 ]), 0) == 1) 
			result = 1;		    

		/*ön sol hamle*/
		else if ( ( source + 16 - 1 ) < (int)strlen( board ) && 
		          ( source + 16 - 1 ) == target &&
		          checkRock((board[source + 16 - 1 ]), 0) == 1) 
			result = 1;	    

		/*arka sağ hamle*/
		else if ( ( source - 16 + 1) >= 0 && 
		          ( source - 16 + 1 ) == target &&
		          checkRock((board[source - 16 + 1 ]), 0) == 1) 
			result = 1;
		     
		/*arka sol hamle  */   
		else if ( ( source - 16 - 1 ) >= 0 && 
		          ( source - 16 - 1 ) == target &&
		          checkRock((board[source - 16 - 1 ]), 0) == 1) 	
			result = 1;
	
		/*yatay sağ ön hamle*/
		else if ( ( source + 2 + 8) < (int)strlen( board ) && 
		          ( source + 2 + 8) == target &&
		          checkRock((board[source + 2 + 8 ]), 0) == 1)  
			result = 1;  
		
		/*yatay sağ arka hamle*/
		else if ( ( source + 2 - 8 ) >= 0 && 
		          ( source + 2 - 8) == target &&
		          checkRock((board[source + 2 - 8 ]), 0) == 1) 
			result = 1;
			
		/*yatay sol ön hamle*/
		else if ( ( source - 2 + 8) < (int)strlen( board ) && 
		          ( source - 2 + 8) == target &&
		          checkRock((board[source - 2 + 8 ]), 0) == 1) 
			result = 1;		     
		     
		/*yatay sol arka hamle*/     
		else if ( ( source - 2 - 8 ) >= 0 && 
		          ( source - 2 - 8 ) == target &&
		          checkRock((board[source - 2 - 8 ]), 0) == 1) 
			result = 1;	
	}
	if ( rock == 'N')
	{
		/*ön sağ hamle*/
		if ( ( source - 16 + 1 ) >= 0 && 
		          ( source - 16 + 1 ) == target &&
		          checkRock((board[source - 16 + 1 ]), 1) == 1) 
			result = 1;		    

		/*ön sol hamle*/
		else if ( ( source - 16 - 1 ) >= 0 && 
		          ( source - 16 - 1 ) == target &&
		          checkRock((board[source - 16 - 1 ]), 1) == 1) 
			result = 1;	    

		/*arka sağ hamle*/
		else if ( ( source + 16 + 1 ) < (int)strlen( board ) && 
		          ( source + 16 + 1 ) == target &&
		          checkRock((board[source + 16 + 1 ]), 1) == 1) 
			result = 1;
		     
		/*arka sol hamle  */   
		else if ( ( source + 16 - 1 ) < (int)strlen( board ) && 
		          ( source + 16 - 1 ) == target &&
		          checkRock((board[source + 16 - 1 ]), 1) == 1) 	
			result = 1;
	
		/*yatay sağ ön hamle*/
		else if ( ( source - 2 + 8) < (int)strlen( board ) && 
		          ( source - 2 + 8) == target &&
		          checkRock((board[source - 2 + 8 ]), 1) == 1) 
			result = 1;  
		
		/*yatay sağ arka hamle*/
		else if ( ( source + 2 + 8) < (int)strlen( board ) && 
		          ( source + 2 + 8) == target &&
		          checkRock((board[source + 2 + 8 ]), 1) == 1) 
			result = 1;
			
		/*yatay sol ön hamle*/
		else if ( ( source + 2 - 8 ) >= 0 && 
		          ( source + 2 - 8 ) == target &&
		          checkRock((board[source + 2 - 8 ]), 1) == 1) 
			result = 1;		     
		     
		/*yatay sol arka hamle*/     
		else if (( source - 2 - 8 ) >= 0 && 
		         ( source - 2 - 8 ) == target &&
		          checkRock((board[source - 2 - 8 ]), 1) == 1)
			result = 1;
	}
	return result;
}
int checkBishop(char *board,int target,int source , int lowerUpper )
{
	int i, result = 0, k = abs ( target - source );
	
	/*sağ çapraz için*/
	if ( k % 9 == 0 )
	{
		if ( target > source )
		{
			for ( i = source + 9 ;  i <= target ;  i += 9 )
			{
				if ( i < target && board[i] != ' ' )
				{
					result = 0;
					i = target + 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1)		
					result = 1;
			}
		}
		else if ( source > target )
		{
			for ( i = source - 9 ;  i >= target ;  i -= 9 )
			{
				if ( i > target && board[i] != ' ' )
				{
					result = 0;
					i = target - 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;
			}
		}
	}
	/*sol çapraz hamle*/
	if ( k % 7 == 0 )
	{
		if ( target > source )
		{
			for ( i = source + 7 ;  i <= target ;  i += 7 )
			{
				if ( i < target && board[i] != ' ' )
				{
					result = 0;
					i = target + 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;	
			}
		}
		else if ( source > target )
		{
			for ( i = source - 7 ;  i >= target ;  i -= 7 )
			{
				if ( i > target && board[i] != ' ' )
				{
					result = 0;
					i = target - 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;
			}
		}
	}
	return result;
}
int isBishopMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		  int targetRow)
{
	char rock; 
	int source, target, result = 0;
	
	source = conversion(  sourceCol, sourceRow  );
	target = conversion( targetCol, targetRow );
	
	rock = board[ source ];
	if ( rock == 'b' || rock == 'q')
	{	
		result = checkBishop( board, target, source , 0 );	
	}
	else if ( rock == 'B' || rock == 'Q')
	{
		result = checkBishop( board, target, source , 1 );	
	}
	return result;
}	
int isQueenMovable(char *board , char sourceCol, int sourceRow, char targetCol, 
		    int targetRow)
{
	int result = 0;
	result=isBishopMovable( board , sourceCol, sourceRow, targetCol, 
		         targetRow);
	if(result==0)
		result=isRookMovable( board , sourceCol, sourceRow, targetCol, 
                       targetRow );                       
	return result;
}
int checkRook(char *board,int target,int source , int lowerUpper )
{
	int k, i, result = 0;
	/*dikey için*/
	k = abs( target - source );
	if ( k % 8 == 0 )
	{
		if ( target > source )
		{
			for ( i = source + 8 ;  i <= target ;  i += 8 )
			{
				if ( i < target && board[i] != ' ' )
				{
					result = 0;
					i = target + 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1)		
					result = 1;
			}
		}
		else if ( source > target )
		{
			for ( i = source - 8 ;  i >= target ;  i -= 8 )
			{
				if ( i > target && board[i] != ' ' )
				{
					result = 0;
					i = target - 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;
			}
		}	
	}
	/*yatay hamle*/
	if ( k < 8 && (target / 8) == (source / 8))
	{
		/*sağ hamle*/
	      	if ( target > source )
		{
			for( i = source+1 ; i <= target  ; i++ )
			{	
				if ( i < target && board[i] != ' ' )
				{
					result = 0;
					i = target + 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;
			}
		}
		/*sol hamle*/
		else if ( source > target )
		{
			for( i = source - 1 ; i >= target  ; i-- )
			{
				if ( i > target && board[i] != ' ' )
				{
					result = 0;
					i = target - 1;
				}
				else if ( target == i && checkRock(board[i],lowerUpper )==1 )		
					result = 1;
			}
		}	
	
	}	
	return result;
}
